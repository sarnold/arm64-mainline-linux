From 90ead5ea3f65a414c0ffcdee1e0b3b293ca4724a Mon Sep 17 00:00:00 2001
From: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
Date: Fri, 23 Jun 2023 21:16:25 +0100
Subject: [PATCH 108/173] media: qcom: camss: Add VFE debugfs support

Add in the ability to export registers of interest read-only via debugfs
for the VFE-17X block.

We can extend this out to other VFE versions later.

Signed-off-by: Bryan O'Donoghue <bryan.odonoghue@linaro.org>
---
 .../media/platform/qcom/camss/camss-vfe-17x.c | 24 +++++++++++
 drivers/media/platform/qcom/camss/camss-vfe.c | 42 +++++++++++++++++++
 drivers/media/platform/qcom/camss/camss-vfe.h |  2 +
 3 files changed, 68 insertions(+)

diff --git a/drivers/media/platform/qcom/camss/camss-vfe-17x.c b/drivers/media/platform/qcom/camss/camss-vfe-17x.c
index 0a7ed947128c..022d779825e2 100644
--- a/drivers/media/platform/qcom/camss/camss-vfe-17x.c
+++ b/drivers/media/platform/qcom/camss/camss-vfe-17x.c
@@ -681,6 +681,29 @@ static void vfe_subdev_init(struct device *dev, struct vfe_device *vfe)
 	vfe->video_ops = vfe_video_ops_170;
 }
 
+static size_t vfe_dump_regs(struct vfe_device *vfe, char *buf, size_t buf_len)
+{
+	size_t len = 0;
+	int i;
+
+	len += scnprintf(buf + len, buf_len - len, "VFE_IRQ_STATUS_0 0x%08x\n",
+			 readl_relaxed(vfe->base + VFE_IRQ_STATUS_0));
+	len += scnprintf(buf + len, buf_len - len, "VFE_IRQ_STATUS_1 0x%08x\n",
+			 readl_relaxed(vfe->base + VFE_IRQ_STATUS_1));
+
+	for (i = VFE_LINE_RDI0; i < vfe->line_num; i++) {
+		len += scnprintf(buf + len, buf_len - len,
+				 "VFE_BUS_IRQ_STATUS(%d) 0x%08x\n", i,
+				 readl_relaxed(vfe->base + VFE_BUS_IRQ_STATUS(i)));
+	}
+
+	len += scnprintf(buf + len, buf_len - len,
+			 "VFE_VIOLATION_STATUS 0x%08x\n",
+			 readl_relaxed(vfe->base + VFE_VIOLATION_STATUS));
+
+	return len;
+}
+
 const struct vfe_hw_ops vfe_ops_170 = {
 	.global_reset = vfe_global_reset,
 	.hw_version = vfe_hw_version,
@@ -696,4 +719,5 @@ const struct vfe_hw_ops vfe_ops_170 = {
 	.vfe_halt = vfe_halt,
 	.violation_read = vfe_violation_read,
 	.vfe_wm_stop = vfe_wm_stop,
+	.dump_regs = vfe_dump_regs,
 };
diff --git a/drivers/media/platform/qcom/camss/camss-vfe.c b/drivers/media/platform/qcom/camss/camss-vfe.c
index e2b4461c5f2b..b09c952d2abf 100644
--- a/drivers/media/platform/qcom/camss/camss-vfe.c
+++ b/drivers/media/platform/qcom/camss/camss-vfe.c
@@ -1621,6 +1621,42 @@ static int vfe_bpl_align(struct vfe_device *vfe)
 	return ret;
 }
 
+static ssize_t read_file_vfe_dump_regs(struct file *file,
+					char __user *user_buf,
+					size_t count, loff_t *ppos)
+{
+	struct vfe_device *vfe = file->private_data;
+	size_t len = 0, buf_len = 2048;
+	char *buf;
+	int ret;
+
+	buf = kzalloc(buf_len, GFP_KERNEL);
+	if (!buf)
+		return -ENOMEM;
+
+	mutex_lock(&vfe->power_lock);
+
+	len += scnprintf(buf, buf_len, "HW_VERSION 0x%08x\n", vfe->hw_version);
+	buf_len -= len;
+
+	if (vfe->power_count)
+		len += vfe->ops->dump_regs(vfe, buf + len, buf_len);
+	else
+		len += scnprintf(buf + len, buf_len, "%s unpowered\n",
+				vfe->irq_name);
+	ret = simple_read_from_buffer(user_buf, count, ppos, buf, len);
+	kfree(buf);
+
+	mutex_unlock(&vfe->power_lock);
+
+	return ret;
+}
+
+static const struct file_operations fops_vfe_dump_regs = {
+	.open = simple_open,
+	.read = read_file_vfe_dump_regs,
+};
+
 /*
  * msm_vfe_register_entities - Register subdev node for VFE module
  * @vfe: VFE device
@@ -1715,6 +1751,12 @@ int msm_vfe_register_entities(struct vfe_device *vfe,
 		}
 	}
 
+	if (vfe->camss->debugfs_rootdir) {
+		debugfs_create_file(vfe->irq_name, 0200,
+				    vfe->camss->debugfs_rootdir, vfe,
+				    &fops_vfe_dump_regs);
+	}
+
 	return 0;
 
 error_link:
diff --git a/drivers/media/platform/qcom/camss/camss-vfe.h b/drivers/media/platform/qcom/camss/camss-vfe.h
index d570a8d0811e..1c5e668ea744 100644
--- a/drivers/media/platform/qcom/camss/camss-vfe.h
+++ b/drivers/media/platform/qcom/camss/camss-vfe.h
@@ -115,6 +115,8 @@ struct vfe_hw_ops {
 	int (*vfe_halt)(struct vfe_device *vfe);
 	void (*violation_read)(struct vfe_device *vfe);
 	void (*vfe_wm_stop)(struct vfe_device *vfe, u8 wm);
+	size_t (*dump_regs)(struct vfe_device *vfe, char *buf,
+			    size_t buf_len);
 };
 
 struct vfe_isr_ops {
-- 
2.43.0

